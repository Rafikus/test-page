{"version":3,"sources":["Article.js","ArticleList.js","App.js","serviceWorker.js","index.js"],"names":["Article","state","markdownText","file","_this2","this","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","allText","responseText","setState","send","readTextFile","props","match","params","id","react_default","a","createElement","react_markdown_default","source","React","Component","withRouter","ArticleList","articles","axios","get","res","data","map","text","react_router_dom","to","App","className","style","width","margin","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAOMA,6MACFC,MAAQ,CACJC,aAAc,gFAGLC,GAAM,IAAAC,EAAAC,KACXC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAOL,GAAM,GAC1BG,EAAQG,mBAAqB,WACzB,GAA2B,IAAvBH,EAAQI,aACe,MAAnBJ,EAAQK,QAAqC,IAAnBL,EAAQK,QAAc,CAChD,IAAIC,EAAUN,EAAQO,aACtBT,EAAKU,SAAS,CACVZ,aAAcU,MAK9BN,EAAQS,KAAK,kDAIbV,KAAKW,aAAa,uEAAyEX,KAAKY,MAAMC,MAAMC,OAAOC,GAAK,wCAIxH,OACIC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIG,OAAQpB,KAAKJ,MAAMC,sBA5BbwB,IAAMC,WAkCbC,cAAW5B,6CCXX6B,6MAtBX5B,MAAQ,CACJ6B,SAAU,qNAIQC,IAAMC,IAAI,uEAAtBC,SACN5B,KAAKS,SAAS,CACVgB,SAAUG,EAAIC,0IAKlB,OACIb,EAAAC,EAAAC,cAAA,WACKlB,KAAKJ,MAAM6B,SAASK,IAAI,SAACC,GAAD,OAAUf,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAI,YAAcF,GAAOA,cAf5DV,IAAMC,WCkBjBY,mLAdP,OACIlB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACXnB,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAACC,MAAO,OAAQC,OAAQ,WACjCtB,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACIhB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWlB,IACnCR,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOE,KAAM,eAAgBC,UAAW/C,cAP9C0B,IAAMC,WCGJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2DCZNkC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1bfbe28f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Article extends React.Component {\r\n    state = {\r\n        markdownText: ''\r\n    };\r\n\r\n    readTextFile(file) {\r\n        let rawFile = new XMLHttpRequest();\r\n        rawFile.open(\"GET\", file, false);\r\n        rawFile.onreadystatechange = () => {\r\n            if (rawFile.readyState === 4) {\r\n                if (rawFile.status === 200 || rawFile.status === 0) {\r\n                    var allText = rawFile.responseText;\r\n                    this.setState({\r\n                        markdownText: allText\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        rawFile.send(null);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.readTextFile('https://raw.githubusercontent.com/Rafikus/fake-api/master/markdowns/' + this.props.match.params.id + '.md');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ReactMarkdown\r\n                source={this.state.markdownText}/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(Article);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\nclass ArticleList extends React.Component {\r\n    state = {\r\n        articles: []\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const res = await axios.get('http://my-json-server.typicode.com/Rafikus/fake-api/articles');\r\n        this.setState({\r\n            articles: res.data\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.articles.map((text) => <li><Link to={'/article/' + text}>{text}</Link></li>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ArticleList;\r\n","import React from 'react';\nimport './App.css';\n\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Article from \"./Article\";\nimport ArticleList from \"./ArticleList\";\n\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <main style={{width: '60vw', margin: '0 auto'}}>\n                    <BrowserRouter>\n                        <Route exact path={'/'} component={ArticleList}/>\n                        <Route path={'/article/:id'} component={Article}/>\n                    </BrowserRouter>\n                </main>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}